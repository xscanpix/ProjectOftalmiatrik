package org.anaxivis;

import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JFrame;
import javax.swing.KeyStroke;

/**
 * The main frame class
 * 
 * @author Svante Nilsson
 * @version 0.1
 * @since 2015-04-06
 */
@SuppressWarnings("serial")
public class Axanivis extends JFrame {
    private static final Logger logger = Logger.getLogger(Axanivis.class.getName());

    private static final int FULLSCREEN_TOGGLE = KeyEvent.VK_F1;
    private static final int MENU_TOGGLE = KeyEvent.VK_F2;
    private static final int DEBUG_MENU_TOGGLE = KeyEvent.VK_F3;
    private static final int MINIMUM_FRAME_WIDTH = 800;
    private static final int MINIMUM_FRAME_HEIGHT = 600;
    private static final boolean START_IN_FULLSCREEN = false;

    private boolean inFullscreen;

    private MainContent mainContent;
    private MainFrameMenu mainMenuBar;

    /**
     * Creates the main window frame and calls {@code init()}.
     * 
     * @param FRAME_TITLE
     *            the title that the window initially gets.
     */
    public Axanivis(final String FRAME_TITLE) {
	super(FRAME_TITLE);

	init();
    }

    /**
     * Configures the window with some basic settings and sets up the component
     * and listeners.
     */
    private void init() {
	setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	setResizable(true);
	setMinimumSize(new Dimension(MINIMUM_FRAME_WIDTH, MINIMUM_FRAME_HEIGHT));
	setLocationRelativeTo(null);

	registerKeyStrokes();

	if (START_IN_FULLSCREEN) {
	    requestToggleFullscreen("Init");
	    inFullscreen = true;
	} else {
	    setSize(getMinimumSize());
	    inFullscreen = false;
	}

	initComponents();

	validate();

	setVisible(true);
	pack();
    }

    /**
     * Registers the key strokes to the window that is used to toggle a
     * multitude of things.
     */
    private void registerKeyStrokes() {
	InputMap inputMap = getRootPane().getInputMap();
	ActionMap actionMap = getRootPane().getActionMap();

	KeyStroke FULLSCREEN_TOGGLE_KEY_STROKE = KeyStroke.getKeyStroke(FULLSCREEN_TOGGLE, 0, true);
	inputMap.put(FULLSCREEN_TOGGLE_KEY_STROKE, FULLSCREEN_TOGGLE);
	actionMap.put(FULLSCREEN_TOGGLE, new AbstractAction() {
	    @Override
	    public void actionPerformed(ActionEvent e) {
		requestToggleFullscreen(KeyEvent.getKeyText(FULLSCREEN_TOGGLE));
	    }
	});

	KeyStroke MENU_TOGGLE_KEY_STROKE = KeyStroke.getKeyStroke(MENU_TOGGLE, 0, true);
	inputMap.put(MENU_TOGGLE_KEY_STROKE, MENU_TOGGLE);
	actionMap.put(MENU_TOGGLE, new AbstractAction() {
	    @Override
	    public void actionPerformed(ActionEvent e) {
		toggleMenu();
	    }
	});

	KeyStroke DEBUG_MENU_TOGGLE_KEY_STROKE = KeyStroke.getKeyStroke(DEBUG_MENU_TOGGLE, 0, true);
	inputMap.put(DEBUG_MENU_TOGGLE_KEY_STROKE, DEBUG_MENU_TOGGLE);
	actionMap.put(DEBUG_MENU_TOGGLE, new AbstractAction() {
	    @Override
	    public void actionPerformed(ActionEvent e) {
		// TODO: Create debug window
	    }
	});
    }

    /**
     * Initializes the components and adds them to the window.
     */
    private void initComponents() {
	mainMenuBar = new MainFrameMenu(this);
	mainContent = new MainContent(this);

	setJMenuBar(mainMenuBar);
	getContentPane().add(mainContent);
    }

    /**
     * Used to request closing the window.
     * 
     * @param message
     *            the message to show when the close is requested.
     */
    public void requestClose(String message) {
	logger.log(Level.INFO, "Close requested: " + message);
	dispose();
    }

    /**
     * Used to request setting the window to fullscreen.
     * 
     * @param message
     *            the message to show when fullscreen is requested.
     */
    public void requestToggleFullscreen(String message) {
	logger.log(Level.INFO, "Fullscreen toggle requested: " + message);

	setVisible(false);

	if (inFullscreen) {
	    dispose();
	    setUndecorated(false);
	    setLocation(0, 0);
	    setExtendedState(MAXIMIZED_BOTH);
	    mainMenuBar.setVisible(true);
	    mainMenuBar.validate();
	    pack();
	    setLocationRelativeTo(null);
	    inFullscreen = false;
	} else {
	    dispose();
	    mainMenuBar.setVisible(false);
	    mainMenuBar.validate();
	    setUndecorated(true);
	    setLocation(0, 0);
	    setExtendedState(MAXIMIZED_BOTH);
	    pack();
	    inFullscreen = true;
	}

	setVisible(true);
	repaint();
    }

    /**
     * Toggles the menu's visibility
     */
    public void toggleMenu() {
	if (getJMenuBar().isVisible()) {
	    getJMenuBar().setVisible(false);
	} else {
	    getJMenuBar().setVisible(true);
	}
    }

    /**
     * Returns the main content variable.
     * 
     * @return the main content variable
     */
    public MainContent getMainContent() {
	return mainContent;
    }

}
